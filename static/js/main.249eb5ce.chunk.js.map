{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","constructors/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","stringTruncate","str","length","dots","substring","CardList","robots","map","user","i","src_components_Card","key","replace","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","nextProps","nextState","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","src_components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_constructors_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.249eb5ce.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='card tc bg-light-green br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img className='robot' alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2 className=\"name\">{name}</h2>\r\n                <p className=\"email\">{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst stringTruncate = (str, length) => {\r\n  const dots = str.length > length ? '...' : '';\r\n  return str.substring(0, length)+dots;\r\n}\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={stringTruncate(robots[i].name.replace(/\\s/g, \"\"), 15)}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        aria-label='Search Robots'\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {   \r\n    return (\r\n        <div className=\"scroll\">\r\n                {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ?\r\n        <h1> Oops. There is a problem!</h1> :\r\n        this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n    render() {\r\n        return <h1 className='f1'>RoboFriends</h1>\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport Header from '../components/Header';\r\nimport \"./App.css\";\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n    return isPending ? (\r\n      <h1 className=\"tc f1\">Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <div className=\"header\">\r\n          <Header />\r\n          <SearchBox className=\"search\" searchChange={onSearchChange} />\r\n        </div>\r\n        <div className=\"spacer\" />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList className=\"cardList\" robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n } from \"./constants.js\";\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n      .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n   } from \"./constants.js\";\r\n\r\n   const intialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst intialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n        }\r\n}","import React from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport \"./index.css\";\r\nimport App from \"./constructors/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"tachyons\";\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(rootReducer , applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}